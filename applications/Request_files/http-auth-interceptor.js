
(function(){'use strict';angular.module('http-auth-interceptor',['http-auth-interceptor-buffer']).factory('authService',['$rootScope','httpBuffer',function($rootScope,httpBuffer){return{loginConfirmed:function(data,configUpdater){var updater=configUpdater||function(config){return config;};$rootScope.$broadcast('event:auth-loginConfirmed',data);httpBuffer.retryAll(updater);},loginCancelled:function(data,reason){httpBuffer.rejectAll(reason);$rootScope.$broadcast('event:auth-loginCancelled',data);}};}]).config(['$httpProvider',function($httpProvider){$httpProvider.interceptors.push(['$rootScope','$q','httpBuffer',function($rootScope,$q,httpBuffer){return{responseError:function(rejection){var config=rejection.config||{};if(!config.ignoreAuthModule){switch(rejection.status){case 401:var deferred=$q.defer();httpBuffer.append(config,deferred);$rootScope.$broadcast('event:auth-loginRequired',rejection);return deferred.promise;case 403:$rootScope.$broadcast('event:auth-forbidden',rejection);break;}}
return $q.reject(rejection);}};}]);}]);angular.module('http-auth-interceptor-buffer',[]).factory('httpBuffer',['$injector',function($injector){var buffer=[];var $http;function retryHttpRequest(config,deferred){function successCallback(response){deferred.resolve(response);}
function errorCallback(response){deferred.reject(response);}
$http=$http||$injector.get('$http');$http(config).then(successCallback,errorCallback);}
return{append:function(config,deferred){buffer.push({config:config,deferred:deferred});},rejectAll:function(reason){if(reason){for(var i=0;i<buffer.length;++i){buffer[i].deferred.reject(reason);}}
buffer=[];},retryAll:function(updater){for(var i=0;i<buffer.length;++i){retryHttpRequest(updater(buffer[i].config),buffer[i].deferred);}
buffer=[];}};}]);})();